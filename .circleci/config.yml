# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      
      - run:
          name: build pack
          command: |
           mkdir -p output
           . venv/bin/activate
           python ./build-pack.py
           mv SnorshCraft*.zip output

      - run:
          name: build changelog
          command: |
           if git describe --exact-match --tags HEAD; then
             # we're on a tag, use the preceding tag as start
             PREV_TAG=$(git describe --abbrev=0 --tags $(git describe --abbrev=0 --tags)^)
           else
             # untagged commit, use the most recent tag as start
             PREV_TAG=$(git describe --abbrev=0 --tags)
           fi
           echo "Creating Changelog from ${PREV_TAG} to $(git describe --tags)"
           . venv/bin/activate
           python make-changelog.py ${PREV_TAG} > output/ChangeLog.txt 2> >(tee -a output/stderr.log >&2)
           cat output/ChangeLog.txt
           cat output/stderr.log
           if grep "ERROR: " output/stderr.log; then
             echo "build contains errors."
             exit 1
           fi

      - store_artifacts:
          path: output
          destination: outputs
          