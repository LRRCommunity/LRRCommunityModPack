import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.eclipse.jgit.lib.ObjectId
import org.eclipse.jgit.lib.ObjectReader
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevCommit
import org.eclipse.jgit.revwalk.RevWalk
import org.eclipse.jgit.treewalk.TreeWalk
import org.eclipse.jgit.treewalk.filter.PathFilter

import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLSession

plugins {
    id 'base'
    id 'org.ajoberstar.grgit' version "1.7.2"
}

def modManifest = new JsonSlurper().parseText(file('manifest.json').text)
version = modManifest.version
ext.packName = modManifest.name

def overrides = ['config/**', 'local/**', 'mods/**', 'resources/**', 'scripts/**']
task distZip(type: Zip) {
    description = "Builds the pack distribution"
    group = "distribution"
    inputs.property("overrides", overrides)
    baseName = packName

    into('/') {
        from(file(projectDir)).include 'manifest.json'
    }
    into('/overrides') {
        from(file(projectDir)).include overrides
    }
}

build.dependsOn "distZip"



task changeLog {
    description = "Generates the changelog"
    group = "distribution"
    outputs.file "$buildDir/ChangeLog.txt"
    outputs.upToDateWhen { false }
    doLast {
        def tempDir = temporaryDir
        // determine last tag version
        def lastCommit = findPrevTag()
        // load the file
        checkoutFile(grgit.repository.jgit.repository, lastCommit, "manifest.json", file("$tempDir/manifest.json"))
        println "Using tag $lastCommit for change generation"

        // compare the files list
        def currentManifest = new JsonSlurper().parseText(file('manifest.json').text)
        def prevManifest = new JsonSlurper().parseText(file("$tempDir/manifest.json").text)
        def currentFiles = buildVersionMap currentManifest.files
        def prevFiles = buildVersionMap prevManifest.files
        def added = currentFiles.keySet() - prevFiles.keySet()
        def removed = prevFiles.keySet() - currentFiles.keySet()
        def changed = [:]
        for (def entry : currentFiles.entrySet()) {
            def old = prevFiles.get(entry.key)
            if (old && entry.value != old)
                changed.put entry.key, entry.value
        }
        // perform a lookup for file details
        def newFiles = []
        for (def file : added)
            newFiles << ["projectID": file,
                         "fileID"   : currentFiles.get(file),
                         "required" : true]
        for (def file : removed)
            newFiles << ["projectID": file,
                         "fileID"   : prevFiles.get(file),
                         "required" : true]
        for (def entry : changed)
            newFiles << ["projectID": entry.key,
                         "fileID"   : entry.value,
                         "required" : true]
        currentManifest.files = newFiles

        file("$tempDir/request.json").write(JsonOutput.toJson(currentManifest))
        def fileInformations = queryManifest(currentManifest)
        file("$tempDir/fileInformation.json").write(JsonOutput.toJson(fileInformations))

        def addedMods = []
        def updatedMods = []
        def removedMods = []
        for (def file : fileInformations.files) {
            if (added.contains(file.projectID))
                addedMods << "${file.addonData.name} (${file.fileData.fileName})"
            else if (removed.contains(file.projectID))
                removedMods << "${file.addonData.name} (${file.fileData.fileName})"
            else if (changed.containsKey(file.projectID))
                updatedMods << "${file.addonData.name} (${file.fileData.fileName})"
        }

        // parse the changelist for CFG messages
        def commits = grgit.log(includes: ['HEAD'], excludes: [lastCommit])
        def cfgLines = []
        for (def commit : commits) {
            def messages = (commit.fullMessage =~ /(?m)^\s*\[CFG](.*)$/)
            while (messages.find())
                cfgLines << messages.group(1)
        }

        // write the changelog file
        file("$buildDir/ChangeLog.txt").write """
<h2>New Mods</h2>
<ul>
${addedMods.collect { "<li>$it</li>" }.join("\n")}
</ul>
<h2>Updated Mods</h2>
<ul>
${updatedMods.collect { "<li>$it</li>" }.join("\n")}
</ul>
<h2>Removed Mods</h2>
<ul>
${removedMods.collect { "<li>$it</li>" }.join("\n")}
</ul>
<h2>Config Changes</h2>
<ul>
${cfgLines.collect { "<li>$it</li>" }.join("\n")}
</ul>
"""
    }

}

build.dependsOn "changeLog"

def queryManifest(manifest) {
    // remove this once we move off staging (the underscore causes hostname issues ....)
    HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true
        }
    }
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid)

    def baseUrl = new URL('https://staging_cursemeta.dries007.net/api/v3/manifest?resolveAddons=true')
    def connection = baseUrl.openConnection()
    connection.with {
        doOutput = true
        setRequestProperty("User-Agent", "Snorshcraft pack buildscript")
        setRequestProperty("Content-Type", "application/json")
        requestMethod = 'POST'
        outputStream.withWriter { writer ->
            writer << JsonOutput.toJson(manifest)
        }
        return new JsonSlurper().parseText(content.text)
    }
}

def buildVersionMap(files) {
    def versions = [:]
    for (def entry : files)
        versions[entry.projectID] = entry.fileID
    versions
}

def checkoutFile(Repository repository, String commit, String file, File destination) {
    ObjectId ref = repository.resolve(commit)
    RevWalk revWalk = new RevWalk(repository)
    RevCommit revCommit = revWalk.parseCommit(ref)
    TreeWalk tree = new TreeWalk(repository)
    tree.addTree(revCommit.getTree())
    tree.setRecursive(true)
    tree.setFilter(PathFilter.create(file))

    ObjectReader objectReader = repository.newObjectReader().with {
        while (tree.next()) {
            destination.bytes = it.open(tree.getObjectId(0)).getBytes()
        }
    }
}

def findPrevTag() {
    def desc = grgit.repository.jgit.describe().setLong(true).call()
    def group = (desc =~ /^(.*)-0-g.{7}$/)
    if (group.matches()) {
        desc = grgit.repository.jgit.describe().setTarget("${group[0][1]}^").call()
        group = (desc =~ /^(.*)-\d+-g.{7}$/)
        return group[0][1]
    } else {
        desc = grgit.describe()
        group = (desc =~ /^(.*)-\d+-g.{7}$/)
        return group[0][1]
    }
}